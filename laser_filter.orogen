name "laser_filter"

import_types_from "base"
using_library "asguard"
using_library "laser_filter"
import_types_from "laser_filter/BoxFilter.hpp"

task_context "Task" do
    input_port("scan_samples", "base/samples/LaserScan").
	needs_reliable_connection.
        doc "LaserScans"

    output_port "filtered_scans", "base::samples::LaserScan"

    transformer do
	transformation("laser", "body")
	align_port('scan_samples', 0.025)

	max_latency(0.1)
    end

    property("minIncline", "double").
	doc("minimal valid incline between two laser readings")

    property("maxIncline", "double").
	doc("maximal valid incline between two laser readings")

    property("maskedNeighbours", "int").
	doc("defines how many laser reading next to an invalid reading get filtered")

    property("filterBoxes", "std::vector<laser_filter::Box>").
	doc("Bounding boxes in body coordinates. Any point inside these boxes gets filtered")

    output_port('debug_laser_frame', '/base/samples/RigidBodyState').
	doc 'debug frame. This is the frame of the laser scan in which it is filtered.'

    port_driven "scan_samples"
end


#export box type so that one can configure the filter
export_types 'laser_filter::Box'
  

# Declares a deployment, i.e. an actual executable that contains various tasks.
deployment "laser_filter_test" do
    # This is a test deployment that should not be installed
    do_not_install

    # Declares it as periodic, with a period of 100ms
    task("laser_filter", "Task").
        periodic(0.1)
end

